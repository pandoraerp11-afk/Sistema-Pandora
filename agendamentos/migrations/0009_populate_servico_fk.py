# Generated by Django 5.2.5 on 2025-09-10 17:48

import json
from django.db import migrations


def update_foreign_keys(apps, schema_editor):
    Agendamento = apps.get_model('agendamentos', 'Agendamento')
    ProfissionalProcedimento = apps.get_model('agendamentos', 'ProfissionalProcedimento')
    
    try:
        with open('procedimento_servico_map.json', 'r') as f:
            mapping = json.load(f)
    except FileNotFoundError:
        # O mapa deve existir. Se não, algo deu errado na fase anterior.
        # Permitir que a migração continue sem falhar, mas registrar um aviso.
        print("\nAVISO: Arquivo de mapeamento 'procedimento_servico_map.json' não encontrado. As chaves estrangeiras de agendamentos não serão migradas.")
        return

    # Atualizar Agendamento
    for agendamento in Agendamento.objects.filter(procedimento_id__isnull=False):
        new_servico_id = mapping.get(str(agendamento.procedimento_id))
        if new_servico_id:
            agendamento.servico_id = new_servico_id
            agendamento.save(update_fields=['servico_id'])

    # Atualizar ProfissionalProcedimento
    for pp in ProfissionalProcedimento.objects.filter(procedimento_id__isnull=False):
        new_servico_id = mapping.get(str(pp.procedimento_id))
        if new_servico_id:
            pp.servico_id = new_servico_id
            pp.save(update_fields=['servico_id'])


def reverse_update_foreign_keys(apps, schema_editor):
    Agendamento = apps.get_model('agendamentos', 'Agendamento')
    ProfissionalProcedimento = apps.get_model('agendamentos', 'ProfissionalProcedimento')
    Agendamento.objects.update(servico_id=None)
    ProfissionalProcedimento.objects.update(servico_id=None)


class Migration(migrations.Migration):

    dependencies = [
        ('agendamentos', '0008_agendamento_servico_profissionalprocedimento_servico'),
        ('servicos', '0003_migrate_procedimentos_to_servicos'),
    ]

    operations = [
        migrations.RunPython(update_foreign_keys, reverse_code=reverse_update_foreign_keys),
    ]
