# Generated by Django 5.0.7 on 2025-09-10 19:00

import json
from django.db import migrations

def update_foreign_keys(apps, schema_editor):
    Atendimento = apps.get_model('prontuarios', 'Atendimento')
    Anamnese = apps.get_model('prontuarios', 'Anamnese')

    # Se os campos legacy não existirem mais, abortar silenciosamente
    atendimento_fields = {f.name for f in Atendimento._meta.get_fields()}
    anamnese_fields = {f.name for f in Anamnese._meta.get_fields()}
    if 'procedimento' not in atendimento_fields and 'procedimento' not in anamnese_fields:
        print("\nINFO: Campos legacy procedimento/procedimento_id não existem mais; migration 0017 torna-se no-op.")
        return

    try:
        with open('procedimento_servico_map.json', 'r') as f:
            mapping = json.load(f)
    except FileNotFoundError:
        print("\nAVISO: Arquivo de mapeamento 'procedimento_servico_map.json' não encontrado. As chaves estrangeiras de prontuarios não serão migradas.")
        return

    def iter_queryset(qs):
        # Evita evaluation grande sem necessidade
        for obj in qs.iterator():
            yield obj

    if 'procedimento' in atendimento_fields:
        for atendimento in iter_queryset(Atendimento.objects.exclude(procedimento_id=None)):
            proc_id = getattr(atendimento, 'procedimento_id', None)
            if proc_id is None:
                continue
            new_servico_id = mapping.get(str(proc_id))
            if new_servico_id:
                atendimento.servico_id = new_servico_id
                atendimento.save(update_fields=['servico_id'])

    if 'procedimento' in anamnese_fields:
        for anamnese in iter_queryset(Anamnese.objects.exclude(procedimento_id=None)):
            proc_id = getattr(anamnese, 'procedimento_id', None)
            if proc_id is None:
                continue
            new_servico_id = mapping.get(str(proc_id))
            if new_servico_id:
                anamnese.servico_id = new_servico_id
                anamnese.save(update_fields=['servico_id'])

def reverse_update_foreign_keys(apps, schema_editor):
    Atendimento = apps.get_model('prontuarios', 'Atendimento')
    Anamnese = apps.get_model('prontuarios', 'Anamnese')
    Atendimento.objects.update(servico_id=None)
    Anamnese.objects.update(servico_id=None)


class Migration(migrations.Migration):

    dependencies = [
        ('prontuarios', '0016_anamnese_servico_atendimento_servico'),
        ('servicos', '0003_migrate_procedimentos_to_servicos'),
    ]

    operations = [
        migrations.RunPython(update_foreign_keys, reverse_code=reverse_update_foreign_keys),
    ]
