# Generated by Django 5.1.5 on 2025-08-14 21:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('cadastros_gerais', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certificacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('nome_certificacao', models.CharField(max_length=200, verbose_name='Nome da Certificação')),
                ('entidade_emissora', models.CharField(blank=True, max_length=200, null=True, verbose_name='Entidade Emissora')),
                ('data_emissao', models.DateField(blank=True, null=True, verbose_name='Data de Emissão')),
                ('data_validade', models.DateField(blank=True, null=True, verbose_name='Data de Validade')),
                ('numero_registro', models.CharField(blank=True, max_length=100, null=True, verbose_name='Número de Registro')),
                ('arquivo_anexo', models.FileField(blank=True, null=True, upload_to='tenant_certificacoes/', verbose_name='Arquivo Anexo')),
                ('observacoes', models.TextField(blank=True, null=True, verbose_name='Observações')),
            ],
            options={
                'verbose_name': 'Certificação',
                'verbose_name_plural': 'Certificações',
                'ordering': ['-data_validade'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('name', models.CharField(help_text='Nome que aparecerá no sistema', max_length=100, verbose_name='Nome Fantasia / Nome de Exibição')),
                ('subdomain', models.CharField(help_text='Identificador único usado para acessar o sistema', max_length=100, unique=True, verbose_name='Subdomínio (identificador único)')),
                ('status', models.CharField(choices=[('active', 'Ativo'), ('inactive', 'Inativo'), ('suspended', 'Suspenso')], default='active', max_length=10, verbose_name='Status')),
                ('enabled_modules', models.JSONField(blank=True, default=dict, help_text='Configuração dos módulos ativos para esta empresa', verbose_name='Módulos Habilitados')),
                ('logo', models.ImageField(blank=True, help_text='Logo que aparecerá no sistema', null=True, upload_to='tenant_logos/', verbose_name='Logo da Empresa')),
                ('tipo_pessoa', models.CharField(choices=[('PJ', 'Pessoa Jurídica'), ('PF', 'Pessoa Física')], default='PJ', max_length=2, verbose_name='Tipo de Pessoa')),
                ('razao_social', models.CharField(blank=True, max_length=255, null=True, verbose_name='Razão Social')),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato XX.XXX.XXX/XXXX-XX', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('inscricao_estadual', models.CharField(blank=True, max_length=20, null=True, verbose_name='Inscrição Estadual')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, validators=[django.core.validators.RegexValidator(message='CPF deve estar no formato XXX.XXX.XXX-XX', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('rg', models.CharField(blank=True, max_length=20, null=True, verbose_name='RG')),
                ('codigo_interno', models.CharField(blank=True, help_text='Código interno para identificação da empresa', max_length=20, null=True, verbose_name='Código Interno')),
                ('nome_contato_principal', models.CharField(blank=True, help_text='Nome da pessoa responsável pela empresa', max_length=200, null=True, verbose_name='Nome do Responsável Principal')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='E-mail Principal')),
                ('email_financeiro', models.EmailField(blank=True, help_text='E-mail específico para questões financeiras', max_length=254, null=True, verbose_name='E-mail do Financeiro')),
                ('email_comercial', models.EmailField(blank=True, help_text='E-mail específico para questões comerciais', max_length=254, null=True, verbose_name='E-mail Comercial')),
                ('email_tecnico', models.EmailField(blank=True, help_text='E-mail específico para questões técnicas', max_length=254, null=True, verbose_name='E-mail Técnico')),
                ('telefone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato (XX) XXXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='Telefone Principal')),
                ('telefone_secundario', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato (XX) XXXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='Telefone Secundário')),
                ('telefone_financeiro', models.CharField(blank=True, help_text='Telefone específico do setor financeiro', max_length=20, null=True, verbose_name='Telefone do Financeiro')),
                ('telefone_comercial', models.CharField(blank=True, help_text='Telefone específico do setor comercial', max_length=20, null=True, verbose_name='Telefone Comercial')),
                ('telefone_emergencia', models.CharField(blank=True, help_text='Telefone para contato em emergências', max_length=20, null=True, verbose_name='Telefone de Emergência')),
                ('whatsapp', models.CharField(blank=True, help_text='Número do WhatsApp para contato', max_length=20, null=True, verbose_name='WhatsApp')),
                ('inscricao_municipal', models.CharField(blank=True, max_length=20, null=True, verbose_name='Inscrição Municipal')),
                ('data_fundacao', models.DateField(blank=True, null=True, verbose_name='Data de Fundação')),
                ('data_abertura', models.DateField(blank=True, help_text='Data de abertura da empresa na Receita Federal', null=True, verbose_name='Data de Abertura')),
                ('porte_empresa', models.CharField(blank=True, choices=[('MEI', 'Microempreendedor Individual'), ('ME', 'Microempresa'), ('EPP', 'Empresa de Pequeno Porte'), ('MEDIA', 'Empresa de Médio Porte'), ('GRANDE', 'Empresa de Grande Porte')], max_length=10, null=True, verbose_name='Porte da Empresa')),
                ('ramo_atividade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ramo de Atividade Principal')),
                ('cnae_principal', models.CharField(blank=True, help_text='Código CNAE da atividade principal', max_length=10, null=True, verbose_name='CNAE Principal')),
                ('cnae_secundarios', models.JSONField(blank=True, default=list, help_text='Lista de códigos CNAE das atividades secundárias', verbose_name='CNAEs Secundários')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Site / Website')),
                ('redes_sociais', models.JSONField(blank=True, default=dict, help_text='Links para redes sociais (Facebook, Instagram, LinkedIn, etc.)', verbose_name='Redes Sociais')),
                ('nome_responsavel_financeiro', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome do Responsável Financeiro')),
                ('nome_responsavel_comercial', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome do Responsável Comercial')),
                ('nome_responsavel_tecnico', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome do Responsável Técnico')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro'), ('N', 'Não informar')], max_length=1, null=True, verbose_name='Sexo')),
                ('naturalidade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Naturalidade (Cidade de Nascimento)')),
                ('nacionalidade', models.CharField(blank=True, default='Brasileira', max_length=100, null=True, verbose_name='Nacionalidade')),
                ('nome_mae', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome da Mãe')),
                ('nome_pai', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome do Pai')),
                ('estado_civil', models.CharField(blank=True, choices=[('S', 'Solteiro(a)'), ('C', 'Casado(a)'), ('D', 'Divorciado(a)'), ('V', 'Viúvo(a)'), ('U', 'União Estável'), ('O', 'Outro')], max_length=1, null=True, verbose_name='Estado Civil')),
                ('profissao', models.CharField(blank=True, max_length=100, null=True, verbose_name='Profissão')),
                ('escolaridade', models.CharField(blank=True, choices=[('FUNDAMENTAL_INCOMPLETO', 'Ensino Fundamental Incompleto'), ('FUNDAMENTAL_COMPLETO', 'Ensino Fundamental Completo'), ('MEDIO_INCOMPLETO', 'Ensino Médio Incompleto'), ('MEDIO_COMPLETO', 'Ensino Médio Completo'), ('SUPERIOR_INCOMPLETO', 'Ensino Superior Incompleto'), ('SUPERIOR_COMPLETO', 'Ensino Superior Completo'), ('ESPECIALIZACAO', 'Especialização/Pós-graduação'), ('MESTRADO', 'Mestrado'), ('DOUTORADO', 'Doutorado'), ('POS_DOUTORADO', 'Pós-doutorado')], max_length=50, null=True, verbose_name='Escolaridade')),
                ('dados_construcao_civil', models.JSONField(blank=True, default=dict, help_text='Especialidades, certificações, registros CREA, etc.', verbose_name='Dados Específicos - Construção Civil')),
                ('dados_saude', models.JSONField(blank=True, default=dict, help_text='Especialidades médicas, equipamentos, certificações ANVISA, etc.', verbose_name='Dados Específicos - Área da Saúde')),
                ('dados_comerciais', models.JSONField(blank=True, default=dict, help_text='Canais de venda, marketplaces, categorias de produtos, etc.', verbose_name='Dados Específicos - Comércio')),
                ('dados_servicos', models.JSONField(blank=True, default=dict, help_text='Tipos de serviços, certificações, especializações, etc.', verbose_name='Dados Específicos - Serviços')),
                ('timezone', models.CharField(choices=[('America/Sao_Paulo', 'Brasília (UTC-3)'), ('America/Manaus', 'Manaus (UTC-4)'), ('America/Rio_Branco', 'Rio Branco (UTC-5)'), ('America/Noronha', 'Fernando de Noronha (UTC-2)')], default='America/Sao_Paulo', max_length=50, verbose_name='Fuso Horário')),
                ('idioma_padrao', models.CharField(choices=[('pt-br', 'Português (Brasil)'), ('en', 'English'), ('es', 'Español')], default='pt-br', max_length=10, verbose_name='Idioma Padrão')),
                ('moeda_padrao', models.CharField(choices=[('BRL', 'Real Brasileiro (R$)'), ('USD', 'Dólar Americano ($)'), ('EUR', 'Euro (€)')], default='BRL', max_length=3, verbose_name='Moeda Padrão')),
                ('formato_data', models.CharField(default='DD/MM/YYYY', help_text='Formato padrão para exibição de datas', max_length=20, verbose_name='Formato de Data')),
                ('regime_tributario', models.CharField(blank=True, choices=[('SIMPLES', 'Simples Nacional'), ('PRESUMIDO', 'Lucro Presumido'), ('REAL', 'Lucro Real'), ('MEI', 'Microempreendedor Individual'), ('ISENTO', 'Isento')], max_length=20, null=True, verbose_name='Regime Tributário')),
                ('inscricao_suframa', models.CharField(blank=True, help_text='Número de inscrição na SUFRAMA, se aplicável', max_length=20, null=True, verbose_name='Inscrição SUFRAMA')),
                ('plano_assinatura', models.CharField(choices=[('BASIC', 'Básico'), ('PRO', 'Profissional'), ('ENTERPRISE', 'Enterprise'), ('CUSTOM', 'Personalizado')], default='BASIC', max_length=10, verbose_name='Plano de Assinatura')),
                ('data_ativacao_plano', models.DateField(blank=True, null=True, verbose_name='Data de Ativação do Plano')),
                ('data_proxima_cobranca', models.DateField(blank=True, null=True, verbose_name='Próxima Cobrança')),
                ('data_fim_trial', models.DateTimeField(blank=True, null=True, verbose_name='Fim do Período de Teste')),
                ('max_usuarios', models.PositiveIntegerField(default=5, help_text='Defina 0 para ilimitado.', verbose_name='Nº Máximo de Usuários')),
                ('max_armazenamento_gb', models.PositiveIntegerField(default=1, help_text='Defina 0 para ilimitado.', verbose_name='Armazenamento Máx. (GB)')),
                ('portal_ativo', models.BooleanField(default=False, help_text='Indica se o portal de acesso para clientes/usuários externos está ativo.', verbose_name='Portal do Cliente Ativo?')),
                ('observacoes', models.TextField(blank=True, help_text='Informações adicionais relevantes sobre a empresa.', null=True, verbose_name='Observações Gerais')),
            ],
            options={
                'verbose_name': 'empresa (tenant)',
                'verbose_name_plural': 'empresas (tenants)',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome Completo do Contato')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail')),
                ('telefone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('cargo', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cargo / Departamento')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observações')),
            ],
            options={
                'verbose_name': 'contato',
                'verbose_name_plural': 'contatos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='DadosBancarios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('banco', models.CharField(max_length=100, verbose_name='Banco')),
                ('agencia', models.CharField(max_length=20, verbose_name='Agência')),
                ('conta', models.CharField(max_length=30, verbose_name='Conta')),
                ('digito', models.CharField(blank=True, max_length=2, null=True, verbose_name='Dígito')),
                ('tipo_conta', models.CharField(choices=[('CORRENTE', 'Conta Corrente'), ('POUPANCA', 'Conta Poupança')], default='CORRENTE', max_length=20, verbose_name='Tipo de Conta')),
                ('chave_pix', models.CharField(blank=True, max_length=255, null=True, verbose_name='Chave PIX')),
                ('observacoes', models.TextField(blank=True, null=True, verbose_name='Observações')),
            ],
            options={
                'verbose_name': 'Dado Bancário',
                'verbose_name_plural': 'Dados Bancários',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('name', models.CharField(max_length=100, verbose_name='Nome do Departamento')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'departamento',
                'verbose_name_plural': 'departamentos',
            },
        ),
        migrations.CreateModel(
            name='EmpresaDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('status_atual', models.CharField(default='ATIVO', max_length=20, verbose_name='Status Atual')),
                ('versao_atual', models.PositiveIntegerField(default=0, verbose_name='Versão Atual')),
            ],
            options={
                'verbose_name': 'Documento da Empresa (Tipo)',
                'verbose_name_plural': 'Documentos da Empresa (Tipos)',
            },
        ),
        migrations.CreateModel(
            name='EmpresaDocumentoVersao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('versao', models.PositiveIntegerField(verbose_name='Versão')),
                ('arquivo', models.FileField(upload_to='tenant_documentos/empresa/', verbose_name='Arquivo')),
                ('data_vigencia_inicio', models.DateField(verbose_name='Início da Vigência')),
                ('data_vigencia_fim', models.DateField(blank=True, null=True, verbose_name='Fim da Vigência')),
                ('enviado_em', models.DateTimeField(auto_now_add=True, verbose_name='Enviado em')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observação')),
                ('competencia', models.CharField(blank=True, max_length=7, null=True, verbose_name='Competência (MM/AAAA)')),
            ],
            options={
                'verbose_name': 'Versão de Documento da Empresa',
                'verbose_name_plural': 'Versões de Documentos da Empresa',
                'ordering': ['-data_vigencia_inicio', '-versao'],
            },
        ),
        migrations.CreateModel(
            name='Endereco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('tipo', models.CharField(choices=[('PRINCIPAL', 'Principal'), ('COBRANCA', 'Cobrança'), ('ENTREGA', 'Entrega'), ('FISCAL', 'Fiscal'), ('OUTRO', 'Outro')], default='PRINCIPAL', max_length=20, verbose_name='Tipo de Endereço')),
                ('logradouro', models.CharField(max_length=200, verbose_name='Logradouro')),
                ('numero', models.CharField(max_length=20, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=100, null=True, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=100, verbose_name='Cidade')),
                ('uf', models.CharField(max_length=2, verbose_name='UF')),
                ('cep', models.CharField(max_length=9, verbose_name='CEP')),
                ('pais', models.CharField(blank=True, default='Brasil', max_length=50, null=True, verbose_name='País')),
                ('ponto_referencia', models.CharField(blank=True, max_length=200, null=True, verbose_name='Ponto de Referência')),
            ],
            options={
                'verbose_name': 'endereço',
                'verbose_name_plural': 'endereços',
                'ordering': ['tipo'],
            },
        ),
        migrations.CreateModel(
            name='EnderecoAdicional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('tipo', models.CharField(choices=[('COB', 'Cobrança'), ('ENT', 'Entrega'), ('FISCAL', 'Fiscal'), ('OUTRO', 'Outro')], max_length=10)),
                ('logradouro', models.CharField(max_length=200)),
                ('numero', models.CharField(max_length=20)),
                ('complemento', models.CharField(blank=True, max_length=100, null=True)),
                ('bairro', models.CharField(max_length=100)),
                ('cidade', models.CharField(max_length=100)),
                ('uf', models.CharField(max_length=2)),
                ('cep', models.CharField(max_length=10)),
                ('pais', models.CharField(blank=True, default='Brasil', max_length=50, null=True)),
                ('ponto_referencia', models.CharField(blank=True, max_length=200, null=True)),
                ('principal', models.BooleanField(default=False, verbose_name='Endereço Principal deste Tipo')),
            ],
            options={
                'verbose_name': 'Endereço Adicional',
                'verbose_name_plural': 'Endereços Adicionais',
                'ordering': ['tipo', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Modulo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome do Módulo')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição do Módulo')),
                ('ativo_por_padrao', models.BooleanField(default=False, verbose_name='Ativo por Padrão para Novos Tenants')),
            ],
            options={
                'verbose_name': 'Módulo',
                'verbose_name_plural': 'Módulos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('name', models.CharField(max_length=100, verbose_name='Nome do Papel')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'papel',
                'verbose_name_plural': 'papéis',
            },
        ),
        migrations.CreateModel(
            name='TenantDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('tipo', models.CharField(blank=True, choices=[('CONTRATO', 'Contrato'), ('RG', 'RG'), ('CPF', 'CPF'), ('OUTRO', 'Outro')], default='OUTRO', max_length=20, null=True, verbose_name='Tipo de Documento')),
                ('descricao', models.CharField(max_length=255, verbose_name='Descrição do Documento')),
                ('arquivo', models.FileField(upload_to='tenant_documentos/', verbose_name='Arquivo')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL do Documento')),
            ],
            options={
                'verbose_name': 'documento da empresa',
                'verbose_name_plural': 'documentos da empresa',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('is_tenant_admin', models.BooleanField(default=False, verbose_name='É Administrador da Empresa')),
            ],
            options={
                'verbose_name': 'vínculo usuário-empresa',
                'verbose_name_plural': 'vínculos usuário-empresa',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificações por E-mail')),
                ('sms_notifications', models.BooleanField(default=False)),
                ('push_notifications', models.BooleanField(default=True)),
                ('items_per_page', models.PositiveIntegerField(default=10, verbose_name='Itens por página')),
                ('dashboard_widgets', models.JSONField(blank=True, default=dict)),
                ('language', models.CharField(default='pt-br', max_length=10, verbose_name='Idioma')),
                ('timezone', models.CharField(default='America/Sao_Paulo', max_length=50, verbose_name='Fuso Horário')),
                ('date_format', models.CharField(default='DD/MM/YYYY', max_length=20)),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Última Atividade')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/', verbose_name='Imagem de Perfil')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Telefone')),
                ('bio', models.TextField(blank=True, verbose_name='Biografia')),
                ('theme_preference', models.CharField(choices=[('light', 'Claro'), ('dark', 'Escuro'), ('auto', 'Automático')], default='auto', max_length=10, verbose_name='Preferência de Tema')),
                ('is_active_directory_user', models.BooleanField(default=False)),
                ('last_password_change', models.DateTimeField(blank=True, null=True, verbose_name='Última troca de senha')),
                ('require_password_change', models.BooleanField(default=False, verbose_name='Exige troca de senha')),
                ('login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentativas de login')),
                ('is_locked', models.BooleanField(default=False, verbose_name='Conta bloqueada')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_groups', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('CREATE', 'Criação'), ('UPDATE', 'Atualização'), ('DELETE', 'Exclusão'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('VIEW', 'Visualização'), ('OTHER', 'Outro')], max_length=10, verbose_name='Tipo de Ação')),
                ('action_time', models.DateTimeField(auto_now_add=True, verbose_name='Data/Hora da Ação')),
                ('change_message', models.TextField(blank=True, verbose_name='Mensagem de Alteração')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Endereço IP')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID do Objeto')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype', verbose_name='Tipo de Conteúdo')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'log de auditoria',
                'verbose_name_plural': 'logs de auditoria',
                'ordering': ['-action_time'],
            },
        ),
        migrations.CreateModel(
            name='ConfiguracaoSistema',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='configuracoes_sistema', serialize=False, to='core.tenant')),
                ('permitir_cadastro_auto_clientes', models.BooleanField(default=False, verbose_name='Permitir cadastro automático de clientes?')),
                ('limite_documentos_upload', models.PositiveIntegerField(default=10, verbose_name='Limite de documentos por upload')),
                ('notificacoes_email_ativas', models.BooleanField(default=True, verbose_name='Notificações por e-mail ativas?')),
                ('cor_primaria_sistema', models.CharField(default='#007bff', max_length=7, verbose_name='Cor Primária do Sistema (Hex)')),
                ('logo_login', models.ImageField(blank=True, null=True, upload_to='system_configs/', verbose_name='Logo da Tela de Login')),
                ('termos_uso', models.TextField(blank=True, null=True, verbose_name='Termos de Uso (HTML/Markdown)')),
                ('politica_privacidade', models.TextField(blank=True, null=True, verbose_name='Política de Privacidade (HTML/Markdown)')),
            ],
            options={
                'verbose_name': 'Configuração do Sistema',
                'verbose_name_plural': 'Configurações do Sistema',
            },
        ),
        migrations.CreateModel(
            name='TenantPessoaFisica',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='pessoafisica_info', serialize=False, to='core.tenant')),
                ('nome_completo', models.CharField(max_length=200, verbose_name='Nome Completo')),
                ('cpf', models.CharField(max_length=14, verbose_name='CPF')),
                ('rg', models.CharField(blank=True, max_length=20, null=True, verbose_name='RG')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro')], max_length=1, null=True, verbose_name='Sexo')),
                ('naturalidade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Naturalidade (Cidade de Nascimento)')),
                ('nome_mae', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome da Mãe')),
                ('nome_pai', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome do Pai')),
                ('estado_civil', models.CharField(blank=True, choices=[('S', 'Solteiro(a)'), ('C', 'Casado(a)'), ('D', 'Divorciado(a)'), ('V', 'Viúvo(a)'), ('U', 'União Estável'), ('O', 'Outro')], max_length=1, null=True, verbose_name='Estado Civil')),
                ('profissao', models.CharField(blank=True, max_length=100, null=True, verbose_name='Profissão')),
                ('nacionalidade', models.CharField(blank=True, default='Brasileira', max_length=100, null=True, verbose_name='Nacionalidade')),
            ],
            options={
                'verbose_name': 'Pessoa Física do Tenant',
                'verbose_name_plural': 'Pessoas Físicas do Tenant',
            },
        ),
        migrations.CreateModel(
            name='TenantPessoaJuridica',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data de atualização')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='pessoajuridica_info', serialize=False, to='core.tenant')),
                ('razao_social', models.CharField(max_length=200, verbose_name='Razão Social')),
                ('nome_fantasia', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome Fantasia')),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, verbose_name='CNPJ')),
                ('inscricao_estadual', models.CharField(blank=True, max_length=20, null=True, verbose_name='Inscrição Estadual')),
                ('inscricao_municipal', models.CharField(blank=True, max_length=20, null=True, verbose_name='Inscrição Municipal')),
                ('data_fundacao', models.DateField(blank=True, null=True, verbose_name='Data de Fundação')),
                ('ramo_atividade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ramo de Atividade')),
                ('porte_empresa', models.CharField(blank=True, max_length=50, null=True, verbose_name='Porte da Empresa')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Site / Website')),
                ('email_financeiro', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail do Financeiro')),
                ('telefone_financeiro', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone do Financeiro')),
            ],
            options={
                'verbose_name': 'Pessoa Jurídica do Tenant',
                'verbose_name_plural': 'Pessoas Jurídicas do Tenant',
            },
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['subdomain'], name='core_tenant_subdoma_5ebe44_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['cnpj'], name='core_tenant_cnpj_dc1d24_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['cpf'], name='core_tenant_cpf_0d62e1_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['status'], name='core_tenant_status_55a303_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['tipo_pessoa'], name='core_tenant_tipo_pe_599d6a_idx'),
        ),
        migrations.AddField(
            model_name='certificacao',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificacoes', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='auditlog',
            name='tenant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='contato',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contatos', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='dadosbancarios',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dados_bancarios', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='department',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='empresadocumento',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='empresa_documentos', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='empresadocumento',
            name='tipo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='empresa_documentos', to='cadastros_gerais.itemauxiliar', verbose_name='Tipo de Documento'),
        ),
        migrations.AddField(
            model_name='empresadocumentoversao',
            name='documento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versoes', to='core.empresadocumento', verbose_name='Documento'),
        ),
        migrations.AddField(
            model_name='empresadocumentoversao',
            name='usuario',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuário'),
        ),
        migrations.AddField(
            model_name='endereco',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enderecos', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='enderecoadicional',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enderecos_adicionais', to='core.tenant'),
        ),
        migrations.AddField(
            model_name='role',
            name='permissions',
            field=models.ManyToManyField(blank=True, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='role',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='tenantdocumento',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documentos', to='core.tenant', verbose_name='Empresa'),
        ),
        migrations.AddField(
            model_name='tenantuser',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.department', verbose_name='Departamento'),
        ),
        migrations.AddField(
            model_name='tenantuser',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.role', verbose_name='Papel'),
        ),
        migrations.AddField(
            model_name='tenantuser',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_users', to='core.tenant'),
        ),
        migrations.AddField(
            model_name='tenantuser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_memberships', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='dadosbancarios',
            unique_together={('tenant', 'banco', 'agencia', 'conta')},
        ),
        migrations.AlterUniqueTogether(
            name='department',
            unique_together={('tenant', 'name')},
        ),
        migrations.AddIndex(
            model_name='empresadocumento',
            index=models.Index(fields=['tenant', 'tipo'], name='core_empres_tenant__d24cd0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='empresadocumento',
            unique_together={('tenant', 'tipo')},
        ),
        migrations.AddIndex(
            model_name='empresadocumentoversao',
            index=models.Index(fields=['documento', 'versao'], name='core_empres_documen_d1f205_idx'),
        ),
        migrations.AddIndex(
            model_name='empresadocumentoversao',
            index=models.Index(fields=['competencia'], name='core_empres_compete_7845b5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='empresadocumentoversao',
            unique_together={('documento', 'versao')},
        ),
        migrations.AlterUniqueTogether(
            name='role',
            unique_together={('tenant', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='tenantuser',
            unique_together={('tenant', 'user')},
        ),
    ]
